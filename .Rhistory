#this variable contains time series data of all state
us_state_cases_deaths = county_data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
deaths = sum(deaths))
#get state names and number of states
state_name = unique(county_data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
#number of states
state_count = length(state_name)
#each sub-object of these objects contains time series of each states
county_new_cases_deaths_sep = list()
for (i in 1:state_count){
county_new_cases_deaths_sep[[i]] = us_state_cases_deaths[us_state_cases_deaths$state == state_name[i], ]
}
county_new_cases_deaths = lapply(county_new_cases_deaths_sep, diff) #calculate new cases and deaths
county_new_cases_deaths = lapply(county_new_cases_deaths, replace_) #replace NA with 0
us_data = diff(us_data)
us_data = replace_(us_data)
states_cases_timeseries = lapply(county_new_cases_deaths, new_case)
states_deaths_timeseries = lapply(county_new_cases_deaths, new_deaths)
us_cases_perday = new_case(us_data)
us_deaths_perday = new_deaths(us_data)
us_cases_perday_change = diff_percent(us_data)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
heatmap_cases = plot_ly()
heatmap_cases = heatmap_cases %>% add_trace(
type = "choropleth",
geojson = county,
locations = current_county_data$fips,
z = current_county_data$cases,
colorscale = "Reds",
zmin = 0,
zmax=  max(county_data$cases)*0.05,
marker = list(line=list(
width = 0)),
hoverinfo = 'text',
showscale = FALSE,
text = ~paste('</br> State: ', current_county_data$state,
'</br> County: ', current_county_data$county,
'</br> Number of cases: ', current_county_data$cases))
heatmap_cases = heatmap_cases %>% colorbar(title = "COVID 19 cases in US")
heatmap_cases = heatmap_cases %>% layout(geo = g) %>%
config(modeBarButtonsToRemove = c("zoomInGeo",
"zoomOutGeo",
"hoverClosestGeo",
"select2d",
"lasso2d",
"toImage",
"pan2d"),
displaylogo = FALSE)
heatmap_cases
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
temp_fig = temp_fig %>% layout(hovermode = 'x',
legend = list(x = 0, y = 1),
xaxis=list(fixedrange=TRUE),
yaxis=list(fixedrange=TRUE),
width = 200,
height = 200)
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
temp_fig = temp_fig %>% layout(hovermode = 'x',
legend = list(x = 0, y = 1),
xaxis=list(fixedrange=TRUE),
yaxis=list(fixedrange=TRUE),
width = 300,
height = 300)
runApp()
runApp('GitHub/covid_dashboard')
temp_fig = temp_fig %>% layout(hovermode = 'x',
legend = list(x = 0, y = 1),
xaxis=list(fixedrange=TRUE),
yaxis=list(fixedrange=TRUE),
width = 200,
height = 300,
showlegend = FALSE)
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
temp_fig = temp_fig %>% layout(hovermode = 'x',
xaxis = list(fixedrange=TRUE,
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
yaxis = list(fixedrange=TRUE,
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
width = 300,
height = 200,
showlegend = FALSE)
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
temp = c(temp_new_cases, round(temp_new_cases_percent, 2))
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
160.9344/18.17
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
12/8
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
library(shiny)
library(plotly)
library(shinyWidgets)
library(shinydashboard)
library(leaflet)
library(DT)
body_colwise <- dashboardBody(
fluidRow(
leafletOutput("temp_fig")
)
)
ui <- dashboardPage(
dashboardHeader(title = "Summary of COVID 19 in United States"),
dashboardSidebar(disable = TRUE),
body_colwise
)
server <- function(input, output, session) {
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
covid19_county_data = read_csv(
url(county_file_url)
)
data = covid19_county_data[covid19_county_data$state == "California", ]
#get state name
state_name = unique(data$state)
#get state bounding box
state_bounding = state_bounding_box[state_bounding_box$NAME == state_name, ]
#get most recent data
data = data[data$date == day, ]
temp_data_cases = subset(data,
select = c("cases", "fips")
)
temp_data_deaths = subset(data,
select = c("deaths", "fips")
)
colnames(temp_data_cases) <- c("cases", "GEOID")
colnames(temp_data_deaths) <- c("deaths", "GEOID")
fips = substring(data$fips[1], 1, 2) #get fips code of the state
#download map shape
map.shape = tigris::counties(state = fips,
cb = TRUE,
resolution='500k')
#convert tabular data into geo-spatial data
map_cases <- geo_join(map.shape,
temp_data_cases,
by = "GEOID")
map_deaths <- geo_join(map.shape,
temp_data_deaths,
by = "GEOID")
#color palette
roundUp <- function(x) 10^ceiling(log10(x))
risk_bins_cases <-c(
0,
ceiling(max(temp_data_cases$cases) * 0.01),
ceiling(max(temp_data_cases$cases) * 0.05),
ceiling(max(temp_data_cases$cases) * 0.1),
ceiling(max(temp_data_cases$cases) * 0.3),
ceiling(max(temp_data_cases$cases) * 0.5),
ceiling(max(temp_data_cases$cases))
)
pal_cases <- colorBin("YlOrRd",
domain = temp_data_cases$cases,
bins = risk_bins_cases
)
pal_deaths <- colorNumeric("Purples",
domain = temp_data_deaths$deaths
)
#make map
temp_fig = leaflet(options = leafletOptions(minZoom = 5)) %>%
addTiles() %>%
#add positive cases layer
addPolygons(
data = map_cases,
fillColor = ~pal_cases(cases),
fillOpacity = 1,
group = "Infected",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_cases$NAME,
"<br>",
"Number of cases: ",
prettyNum(map_cases$cases,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add deaths layer
addPolygons(
data = map_deaths,
fillColor = ~pal_deaths(deaths),
fillOpacity = 1,
group = "Fatality",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_deaths$NAME,
"<br>",
"Number of fatality: ",
prettyNum(map_deaths$deaths,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add legends
addLegend(
title = "Positive Cases",
pal = pal_cases,
values = map_cases$cases,
group = "Infected",
opacity = 1) %>%
addLegend(
title = "Fatality",
pal = pal_deaths,
values = map_deaths$deaths,
group = "Fatality",
opacity = 1) %>%
#add layer control
addLayersControl(
baseGroups = c ("Infected", "Fatality"),
#overlayGroups = c ("Infected", "Fatality"),
position = "topleft",
options = layersControlOptions(collapsed = FALSE)
) %>%
#set max bound
setMaxBounds( lng1 = state_bounding$xmin,
lat1 = state_bounding$ymin,
lng2 = state_bounding$xmax,
lat2 = state_bounding$ymax)
output$map = renderLeaflet(temp_fig)
}
temp_fig
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
shiny::runApp('GitHub/covid_dashboard')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('GitHub/covid_dashboard')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp('C:/Users/nghia/OneDrive/Desktop/test map.R')
runApp()
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
state.name
state.name
covid19_state_data[1]
state.name[1]
state.name[2]
runApp('GitHub/covid_dashboard')
gc()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
#wd = "/srv/shiny-server/myapp/"
setwd(wd)
map.shape = tigris::counties(state = 06,
cb = TRUE,
resolution='500k',
year = 2019)
map.shape$GEOID
typeof(map.shape$GEOID)
shiny::runApp()
runApp()
runApp()
x = "11151995"
as.Date(x)
x = "11-15-1995"
as.Date(x)
covid19_county_data
covid19_county_data = read.csv(county_file_url,
stringsAsFactors=FALSE,
header=TRUE
)
covid19_county_data$date
x = "2020-03-09"
x
as.Date(x)
as.Date(as.character(x))
state.name[51] = "National"
state.name
runApp()
runApp()
x = c(NULL, NULL)
x
as.Date(x)
x = NA
x
as.Date(x)
options(shiny.sanitize.errors = FALSE)
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
#wd = "/srv/shiny-server/myapp/"
setwd(wd)
source("functions.R")
selected_state = reactive(input$select)
covid19_county_data = read.csv(county_file_url,
stringsAsFactors=FALSE,
header=TRUE)
fatality_by_gender = read.csv(fatality_by_gender_url,
stringsAsFactors=FALSE,
header=TRUE)
covid19_nation_data = read.csv(us_file_url,
stringsAsFactors=FALSE,
header=TRUE)
#format data
fips = covid19_county_data$fips
fips = lapply(fips, function(x){
if(is.na(x) == TRUE)
return(0)
else
return(x)
})
fips = lapply(fips, function(x){
if (nchar(x) < 5)
return(paste0("0", x))
else return(x)
})
covid19_county_data$fips = fips
covid19_county_data$date = as.Date(covid19_county_data$date)
covid19_nation_data$date = as.Date(covid19_nation_data$date)
#this variable contains time series data of all state
covid19_state_data = covid19_county_data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
deaths = sum(deaths)
)
state_name = unique(covid19_state_data$state)
#each sub-object of these objects contains time series data of each states
covid19_timeseries_data = list()
for (i in 1:length(state.name)){
covid19_timeseries_data[[i]] = covid19_state_data[covid19_state_data$state == state.name[i], ]
}
covid19_timeseries_data = lapply(covid19_timeseries_data, diff) #calculate new cases and deaths
covid19_timeseries_data = lapply(covid19_timeseries_data, replaceNA) #replace NA with 0
#include nation data in the list
covid19_timeseries_data[[length(covid19_timeseries_data) + 1]] = replaceNA(
diff(
covid19_nation_data
)
)
#collapse the list of list
covid19_timeseries_data = do.call(rbind, covid19_timeseries_data)
covid19_timeseries_data
class(covid19_timeseries_data$date)
