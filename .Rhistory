y = temp_state$death,
name = "Fatality",
type = 'scatter',
mode = 'lines',
text = ~paste('Total number of fatality: ', temp_state$death))
temp_fig = temp_fig %>% layout(hovermode = 'x')
return(plotly_build(temp_fig))
}
#this function calculate new cases and death each day
diff <- function(x){
temp = x %>% mutate(cases_diff = cases - lag(cases),
death_dff = death - lag(death))
return(temp)
}
for (i in 1:state_count){
states_cases_death[[i]] = us_cases_death[us_cases_death$state == state_name[i], ]
}
states_cases_death_visualization = lapply(states_cases_death, draw)
end_time <- Sys.time()
end_time - start_time
us_cases_death
states_data = diff(states_cases_death[[1]])
states_data
fix(states_data)
start_time <- Sys.time()
library('readr')
library('dplyr')
library('plotly')
file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
data = read_csv(url(file_url))
#this variable contains time series of all states
us_cases_death = data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
death = sum(deaths))
#get state names and number of states
state_name = unique(data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
state_count = length(state_name)
#each sub-object of these objects contains time series of each states
states_cases_death = list()
states_new_cases_death
#this object contains visualization of each states
states_cases_death_visualization = list()
#this function takes data as input and plot as output
draw = function(x){
temp_state = as.data.frame(x)
temp_state$date = as.Date(temp_state$date)
temp_fig = plot_ly(
x = temp_state$date,
y = temp_state$cases,
name = "Infected",
type = 'scatter',
mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Day: ', temp_state$date,
'</br> Total number of covid-19 Positive: ', temp_state$cases))
temp_fig = temp_fig %>% add_trace(
x = temp_state$date,
y = temp_state$death,
name = "Fatality",
type = 'scatter',
mode = 'lines',
text = ~paste('Total number of fatality: ', temp_state$death))
temp_fig = temp_fig %>% layout(hovermode = 'x')
return(plotly_build(temp_fig))
}
#this function calculate new cases and death each day
diff <- function(x){
temp = x %>% mutate(cases_diff = cases - lag(cases),
death_dff = death - lag(death))
return(temp)
}
for (i in 1:state_count){
states_cases_death[[i]] = us_cases_death[us_cases_death$state == state_name[i], ]
}
states_cases_death_visualization = lapply(states_cases_death, draw)
sates_data = lapply(states_cases_death, diff)
end_time <- Sys.time()
end_time - start_time
sates_data
start_time <- Sys.time()
library('readr')
library('dplyr')
library('plotly')
file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
data = read_csv(url(file_url))
#this variable contains time series of all states
us_cases_death = data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
death = sum(deaths))
#get state names and number of states
state_name = unique(data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
state_count = length(state_name)
#each sub-object of these objects contains time series of each states
states_cases_death = list()
#this function takes data as input and plot as output
draw = function(x){
temp_state = as.data.frame(x)
temp_state$date = as.Date(temp_state$date)
temp_fig = plot_ly(
x = temp_state$date,
y = temp_state$cases,
name = "Infected",
type = 'scatter',
mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Day: ', temp_state$date,
'</br> Total number of covid-19 Positive: ', temp_state$cases))
temp_fig = temp_fig %>% add_trace(
x = temp_state$date,
y = temp_state$death,
name = "Fatality",
type = 'scatter',
mode = 'lines',
text = ~paste('Total number of fatality: ', temp_state$death))
temp_fig = temp_fig %>% layout(hovermode = 'x')
return(plotly_build(temp_fig))
}
#this function calculate new cases and death each day
diff <- function(x){
temp = x %>% mutate(cases_diff = cases - lag(cases),
death_dff = death - lag(death))
return(temp)
}
for (i in 1:state_count){
states_cases_death[[i]] = us_cases_death[us_cases_death$state == state_name[i], ]
}
states_cases_death_visualization = lapply(states_cases_death, draw)
states_data = lapply(states_cases_death, diff)
end_time <- Sys.time()
end_time - start_time
x = states_data[[3]]
fix(x)
state[state$Name == "Texas"]
state[state$Name == "Texas",]
x = states_data[[7]]
fix(x)
start_time <- Sys.time()
library('readr')
library('dplyr')
library('plotly')
file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
data = read_csv(url(file_url))
#this variable contains time series of all states
us_cases_death = data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
death = sum(deaths))
#get state names and number of states
state_name = unique(data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
state_count = length(state_name)
#each sub-object of these objects contains time series of each states
states_cases_death = list()
#cumulative death and positive cases
cumulate <- function(x){
temp_state = as.data.frame(x)
temp_state$date = as.Date(temp_state$date)
temp_fig = plot_ly(
x = temp_state$date,
y = temp_state$cases,
name = "Infected",
type = 'scatter',
mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Day: ', temp_state$date,
'</br> Total number of covid-19 Positive: ', temp_state$cases))
temp_fig = temp_fig %>% add_trace(
x = temp_state$date,
y = temp_state$death,
name = "Fatality",
type = 'scatter',
mode = 'lines',
text = ~paste('Total number of fatality: ', temp_state$death))
temp_fig = temp_fig %>% layout(hovermode = 'x')
return(plotly_build(temp_fig))
}
perday <- function(x){
temp_state = as.data.frame(x)
temp_state$date = as.Date(temp_state$date)
temp_fig = plot_ly(
x = temp_state$date,
y = temp_state$diff_cases,
name = "New Infected",
type = 'scatter',
mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Day: ', temp_state$date,
'</br> Total number of covid-19 Positive: ', temp_state$diff_cases))
temp_fig = temp_fig %>% add_trace(
x = temp_state$date,
y = temp_state$diff_death,
name = "New Fatality",
type = 'scatter',
mode = 'lines',
text = ~paste('Total number of fatality: ', temp_state$diff_death))
temp_fig = temp_fig %>% layout(hovermode = 'x')
return(plotly_build(temp_fig))
}
#this function calculate new cases and death each day
diff <- function(x){
temp = as.data.frame(x)
temp$date = as.Date(temp$date)
temp = x %>% mutate(cases_diff = cases - lag(cases),
death_dff = death - lag(death))
return(temp)
}
for (i in 1:state_count){
states_cases_death[[i]] = us_cases_death[us_cases_death$state == state_name[i], ]
}
states_cases_death_visualization = lapply(states_cases_death, cumulate)
states_data = lapply(states_cases_death, diff)
x = lapply(states_data, perday)
end_time <- Sys.time()
end_time - start_time
x[[3]]
x[[1]]
states_data
states[states$Name == "Missouri", ]
state[states$Name == "Missouri", ]
state[state$Name == "Missouri", ]
x = states_cases_death[[31]]
perday(x)
x
x = states_data[[31]]
x
perday(x)
x
start_time <- Sys.time()
library('readr')
library('dplyr')
library('plotly')
file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
data = read_csv(url(file_url))
#this variable contains time series of all states
us_cases_death = data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
death = sum(deaths))
#get state names and number of states
state_name = unique(data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
state_count = length(state_name)
#each sub-object of these objects contains time series of each states
states_cases_death = list()
#cumulative death and positive cases
cumulate <- function(x){
temp_state = as.data.frame(x)
temp_state$date = as.Date(temp_state$date)
temp_fig = plot_ly(
x = temp_state$date,
y = temp_state$cases,
name = "Infected",
type = 'scatter',
mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Day: ', temp_state$date,
'</br> Total number of covid-19 Positive: ', temp_state$cases))
temp_fig = temp_fig %>% add_trace(
x = temp_state$date,
y = temp_state$death,
name = "Fatality",
type = 'scatter',
mode = 'lines',
text = ~paste('Total number of fatality: ', temp_state$death))
temp_fig = temp_fig %>% layout(hovermode = 'x')
return(plotly_build(temp_fig))
}
perday <- function(x){
temp_state = as.data.frame(x)
temp_state$date = as.Date(temp_state$date)
temp_fig = plot_ly(
x = temp_state$date,
y = temp_state$cases_diff,
name = "New Infected",
type = 'scatter',
mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Day: ', temp_state$date,
'</br> Total number of covid-19 Positive: ', temp_state$cases_diff))
temp_fig = temp_fig %>% add_trace(
x = temp_state$date,
y = temp_state$death_diff,
name = "New Fatality",
type = 'scatter',
mode = 'lines',
text = ~paste('Total number of fatality: ', temp_state$death_diff))
temp_fig = temp_fig %>% layout(hovermode = 'x')
return(plotly_build(temp_fig))
}
#this function calculate new cases and death each day
diff <- function(x){
temp = as.data.frame(x)
temp$date = as.Date(temp$date)
temp = x %>% mutate(cases_diff = cases - lag(cases),
death_dff = death - lag(death))
return(temp)
}
for (i in 1:state_count){
states_cases_death[[i]] = us_cases_death[us_cases_death$state == state_name[i], ]
}
states_cases_death_visualization = lapply(states_cases_death, cumulate)
states_data = lapply(states_cases_death, diff)
x = lapply(states_data, perday)
end_time <- Sys.time()
end_time - start_time
x[[31]]
states_data
start_time <- Sys.time()
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
library('readr')
library('dplyr')
library('plotly')
library('zoo')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
us_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
county_data = read_csv(url(county_file_url))
us_data = read_csv(url(us_file_url))
#this variable contains time series of all states
us_cases_deaths = county_data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
deaths = sum(deaths))
#get state names and number of states
state_name = unique(county_data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
state_count = length(state_name)
states_cases_deaths = list() #each sub-object of these objects contains time series of each states
for (i in 1:state_count){
states_cases_deaths[[i]] = us_cases_deaths[us_cases_deaths$state == state_name[i], ]
}
states_data = lapply(states_cases_deaths, diff) #calculate new cases and deaths
states_data = lapply(states_data, replace_) #replace NA with 0
us_data = diff(us_data)
us_data = replace_(us_data)
states_cases_deaths_cumulate = lapply(states_data, cumulate)
states_cases_perday = lapply(states_data, new_case)
states_deaths_perday = lapply(states_data, new_deaths)
us_cases_deaths_cumulate = cumulate(us_data)
us_cases_perday = new_case(us_data)
us_deaths_perday = new_deaths(us_data)
end_time <- Sys.time()
end_time - start_time
us_cases_perday
us_deaths_perday
start_time <- Sys.time()
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
library('readr')
library('dplyr')
library('plotly')
library('zoo')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
us_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
county_data = read_csv(url(county_file_url))
us_data = read_csv(url(us_file_url))
#this variable contains time series of all states
us_cases_deaths = county_data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
deaths = sum(deaths))
#get state names and number of states
state_name = unique(county_data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
state_count = length(state_name)
states_cases_deaths = list() #each sub-object of these objects contains time series of each states
for (i in 1:state_count){
states_cases_deaths[[i]] = us_cases_deaths[us_cases_deaths$state == state_name[i], ]
}
states_data = lapply(states_cases_deaths, diff) #calculate new cases and deaths
states_data = lapply(states_data, replace_) #replace NA with 0
us_data = diff(us_data)
us_data = replace_(us_data)
states_cases_deaths_cumulate = lapply(states_data, cumulate)
states_cases_perday = lapply(states_data, new_case)
states_deaths_perday = lapply(states_data, new_deaths)
us_cases_deaths_cumulate = cumulate(us_data)
us_cases_perday = new_case(us_data)
us_deaths_perday = new_deaths(us_data)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
library('readr')
library('dplyr')
library('plotly')
library('zoo')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
us_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
county_data = read_csv(url(county_file_url))
us_data = read_csv(url(us_file_url))
#this variable contains time series of all states
us_cases_deaths = county_data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
deaths = sum(deaths))
#get state names and number of states
state_name = unique(county_data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
state_count = length(state_name)
states_cases_deaths = list() #each sub-object of these objects contains time series of each states
for (i in 1:state_count){
states_cases_deaths[[i]] = us_cases_deaths[us_cases_deaths$state == state_name[i], ]
}
states_data = lapply(states_cases_deaths, diff) #calculate new cases and deaths
states_data = lapply(states_data, replace_) #replace NA with 0
us_data = diff(us_data)
us_data = replace_(us_data)
states_cases_perday = lapply(states_data, new_case)
states_deaths_perday = lapply(states_data, new_deaths)
us_cases_perday = new_case(us_data)
us_deaths_perday = new_deaths(us_data)
end_time <- Sys.time()
end_time - start_time
states_deaths_perday[[14]]
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
us_data[nrow(us_data)]
us_data[nrow(us_data), ]$cases
us_data[nrow(us_data), ]$cases - us_data[nrow(us_data)-1, ]$cases
diff_percent <- function(x){
percent_change = x[nrow(x), ]$cases -  x[nrow(x)-1, ]
}
diff_percent <- function(x){
percent_change = x[nrow(x), ]$cases -  x[nrow(x)-1, ]
return(percent_change)
}
diff_percent(us_data)
diff_percent <- function(x){
percent_change = x[nrow(x), ]$cases -  x[nrow(x)-1, ]$cases
return(percent_change)
}
diff_percent(us_data)
diff_percent <- function(x){
temp_new_cases = x[nrow(x), ]$cases -  x[nrow(x)-1, ]$cases
temp_new_cases_percent = temp_new_cases / x[nrow(x)-1, ]$cases * 100
temp = c(temp_new_cases, round(temp_new_cases_percent, 2))
return(temp)
}
diff_percent(us_data)
runApp()
runApp()
install.packages('shinydashboard')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
