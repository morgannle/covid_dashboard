count = 10,
label = "10 states",
step = "state",
stepmode = "backward")))
current_us_state_cases_barplot
current_us_state_cases_barplot = plot_ly(current_us_state_cases,
y = ~state,
x = ~cases,
type = 'bar',
orientation = 'h') %>%
layout(xaxis=list(fixedrange=TRUE)) %>%
layout(yaxis=list(fixedrange=TRUE,
range = c(39.5, 55),
rangeselector = list(
count = 10,
label = "10 states",
step = "state",
stepmode = "backward")))
runApp('GitHub/covid_dashboard')
library('DT')
install.packages('DT')
shiny::runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
library(plotly)
library(dplyr)
age <- rep(1:5, 2)
sex <- rep(c('Male', 'Female'), each = 5)
pop <- c(-1000, -944, -888, -762, -667, 1100, 999, 844, 789, 655)
df <- data.frame(age, sex, pop) %>%
mutate(abs_pop = abs(pop))
plot_ly(df, x = pop, y = age, group = sex, type = 'bar', orientation = 'h',
hoverinfo = 'y+text+name', text = abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-1000, -500, 0, 500, 1000),
ticktext = c('1000', '500', '0', '500', '1000')))
library(plotly)
library(dplyr)
age <- rep(1:5, 2)
sex <- rep(c('Male', 'Female'), each = 5)
pop <- c(-1000, -944, -888, -762, -667, 1100, 999, 844, 789, 655)
df <- data.frame(age, sex, pop) %>%
mutate(abs_pop = abs(pop))
plot_ly(df, x = pop, y = age, group = sex, type = 'bar', orientation = 'h',
hoverinfo = 'y+text+name', text = abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-1000, -500, 0, 500, 1000),
ticktext = c('1000', '500', '0', '500', '1000')))
library(plotly)
library(dplyr)
age <- rep(1:5, 2)
sex <- rep(c('Male', 'Female'), each = 5)
pop <- c(-1000, -944, -888, -762, -667, 1100, 999, 844, 789, 655)
df <- data.frame(age, sex, pop) %>%
mutate(abs_pop = abs(pop))
df
plot_ly(df, x = pop, y = age, group = sex, type = 'bar', orientation = 'h',
hoverinfo = 'y+text+name', text = abs_pop)
library(plotly)
library(dplyr)
age <- rep(1:5, 2)
sex <- rep(c('Male', 'Female'), each = 5)
pop <- c(-1000, -944, -888, -762, -667, 1100, 999, 844, 789, 655)
df <- data.frame(age, sex, pop) %>%
mutate(abs_pop = abs(pop))
plot_ly(df, x = pop, y = age, group = sex, type = 'bar', orientation = 'h',
hoverinfo = 'y+text+name', text = df$abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-1000, -500, 0, 500, 1000),
ticktext = c('1000', '500', '0', '500', '1000')))
library(plotly)
library(dplyr)
age <- rep(1:5, 2)
sex <- rep(c('Male', 'Female'), each = 5)
pop <- c(-1000, -944, -888, -762, -667, 1100, 999, 844, 789, 655)
df <- data.frame(age, sex, pop) %>%
mutate(abs_pop = abs(pop))
df %>%
plot_ly(x= ~pop, y=~age,color=~sex) %>%
add_bars(orientation = 'h', hoverinfo = 'text', text = ~abs_pop) %>%
layout(bargap = 0.1, barmode = 'overlay',
xaxis = list(tickmode = 'array', tickvals = c(-1000, -500, 0, 500, 1000),
ticktext = c('1000', '500', '0', '500', '1000')))
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
body <- dashboardBody(
fluidRow(
box(
title = "Box title", width = 6, status = "primary",
"Box content"
),
box(
status = "warning", width = 6,
"Box content"
)
),
fluidRow(
column(width = 4,
box(
title = "Title 1", width = NULL, solidHeader = TRUE, status = "primary",
"Box content"
),
box(
width = NULL, background = "black",
"A box with a solid black background"
)
),
column(width = 4,
box(
title = "Title 3", width = NULL, solidHeader = TRUE, status = "warning",
"Box content"
),
box(
title = "Title 5", width = NULL, background = "light-blue",
"A box with a solid light-blue background"
)
),
column(width = 4,
box(
title = "Title 2", width = NULL, solidHeader = TRUE,
"Box content"
),
box(
title = "Title 6", width = NULL, background = "maroon",
"A box with a solid maroon background"
)
)
)
)
# We'll save it in a variable `ui` so that we can preview it in the console
ui <- dashboardPage(
dashboardHeader(title = "Mixed layout"),
dashboardSidebar(),
body
)
# Preview the UI in the console
shinyApp(ui = ui, server = function(input, output) { })
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
gc()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
us_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
json_url = 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
county = rjson::fromJSON(file = json_url)
county_data = read_csv(url(county_file_url))
county_data$fips = as.character(county_data$fips)
current_county_data = county_data[county_data$date == Sys.Date()-2, ] #data
us_data = read_csv(url(us_file_url))
current_us_state_cases_deaths = us_state_cases_deaths[us_state_cases_deaths$date == Sys.Date()-1, ]
#split the most current data into positive cases and deaths
current_us_state_cases = current_us_state_cases_deaths[ ,c(1,3)]
current_us_state_deaths = current_us_state_cases_deaths[,c(1,4)]
#sorting
current_us_state_cases$state = factor(current_us_state_cases$state,
levels = unique(current_us_state_cases$state[order(current_us_state_cases$cases, decreasing = FALSE)]))
current_us_state_deaths$state = factor(current_us_state_deaths$state,
levels = unique(current_us_state_deaths$state[order(current_us_state_deaths$deaths, decreasing = FALSE)]))
#barplot for cases
current_us_state_cases_barplot = plot_ly(current_us_state_cases,
y = ~state,
x = ~cases,
type = 'bar',
orientation = 'h') %>%
layout(xaxis=list(fixedrange=TRUE),
height = 1000) %>%
layout(yaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar = FALSE)
#barplot for deaths
current_us_state_deaths_barplot = plot_ly(current_us_state_deaths,
y = ~state,
x = ~deaths,
color = '#CC1480',
type = 'bar',
orientation = 'h') %>%
layout(xaxis=list(fixedrange=TRUE),
height = 1000) %>%
layout(yaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar = FALSE)
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
us_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
json_url = 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
county = rjson::fromJSON(file = json_url)
county_data = read_csv(url(county_file_url))
county_data$fips = as.character(county_data$fips)
current_county_data = county_data[county_data$date == Sys.Date()-2, ] #data
us_data = read_csv(url(us_file_url))
us_state_cases_deaths = county_data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
deaths = sum(deaths))
current_us_state_cases_deaths = us_state_cases_deaths[us_state_cases_deaths$date == Sys.Date()-1, ]
current_us_state_cases = current_us_state_cases_deaths[ ,c(1,3)]
current_us_state_deaths = current_us_state_cases_deaths[,c(1,4)]
#sorting
current_us_state_cases$state = factor(current_us_state_cases$state,
levels = unique(current_us_state_cases$state[order(current_us_state_cases$cases, decreasing = FALSE)]))
current_us_state_deaths$state = factor(current_us_state_deaths$state,
levels = unique(current_us_state_deaths$state[order(current_us_state_deaths$deaths, decreasing = FALSE)]))
#barplot for cases
current_us_state_cases_barplot = plot_ly(current_us_state_cases,
y = ~state,
x = ~cases,
type = 'bar',
orientation = 'h') %>%
layout(xaxis=list(fixedrange=TRUE),
height = 1000) %>%
layout(yaxis=list(fixedrange=TRUE)) %>%
config(displayModeBar = FALSE)
current_us_state_cases_barplot
current_us_state_cases
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
us_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
json_url = 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
county = rjson::fromJSON(file = json_url)
county_data = read_csv(url(county_file_url))
county_data$fips = as.character(county_data$fips)
current_county_data = county_data[county_data$date == Sys.Date()-2, ] #data
us_data = read_csv(url(us_file_url))
#this variable contains time series data of all state
us_state_cases_deaths = county_data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
deaths = sum(deaths))
#get state names and number of states
state_name = unique(county_data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
#number of states
state_count = length(state_name)
#each sub-object of these objects contains time series of each states
county_new_cases_deaths_sep = list()
for (i in 1:state_count){
county_new_cases_deaths_sep[[i]] = us_state_cases_deaths[us_state_cases_deaths$state == state_name[i], ]
}
county_new_cases_deaths = lapply(county_new_cases_deaths_sep, diff) #calculate new cases and deaths
county_new_cases_deaths = lapply(county_new_cases_deaths, replace_) #replace NA with 0
us_data = diff(us_data)
us_data = replace_(us_data)
states_cases_timeseries = lapply(county_new_cases_deaths, new_case)
states_deaths_timeseries = lapply(county_new_cases_deaths, new_deaths)
us_cases_perday = new_case(us_data)
us_deaths_perday = new_deaths(us_data)
us_cases_perday_change = diff_percent(us_data)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
heatmap_cases = plot_ly()
heatmap_cases = heatmap_cases %>% add_trace(
type = "choropleth",
geojson = county,
locations = current_county_data$fips,
z = current_county_data$cases,
colorscale = "Reds",
zmin = 0,
zmax=  max(county_data$cases)*0.05,
marker = list(line=list(
width = 0)),
hoverinfo = 'text',
showscale = FALSE,
text = ~paste('</br> State: ', current_county_data$state,
'</br> County: ', current_county_data$county,
'</br> Number of cases: ', current_county_data$cases))
heatmap_cases = heatmap_cases %>% colorbar(title = "COVID 19 cases in US")
heatmap_cases = heatmap_cases %>% layout(geo = g) %>%
config(modeBarButtonsToRemove = c("zoomInGeo",
"zoomOutGeo",
"hoverClosestGeo",
"select2d",
"lasso2d",
"toImage",
"pan2d"),
displaylogo = FALSE)
heatmap_cases
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
temp_fig = temp_fig %>% layout(hovermode = 'x',
legend = list(x = 0, y = 1),
xaxis=list(fixedrange=TRUE),
yaxis=list(fixedrange=TRUE),
width = 200,
height = 200)
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
temp_fig = temp_fig %>% layout(hovermode = 'x',
legend = list(x = 0, y = 1),
xaxis=list(fixedrange=TRUE),
yaxis=list(fixedrange=TRUE),
width = 300,
height = 300)
runApp()
runApp('GitHub/covid_dashboard')
temp_fig = temp_fig %>% layout(hovermode = 'x',
legend = list(x = 0, y = 1),
xaxis=list(fixedrange=TRUE),
yaxis=list(fixedrange=TRUE),
width = 200,
height = 300,
showlegend = FALSE)
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
temp_fig = temp_fig %>% layout(hovermode = 'x',
xaxis = list(fixedrange=TRUE,
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
yaxis = list(fixedrange=TRUE,
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
width = 300,
height = 200,
showlegend = FALSE)
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
temp = c(temp_new_cases, round(temp_new_cases_percent, 2))
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
160.9344/18.17
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
12/8
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp()
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
shiny::runApp('GitHub/covid_dashboard')
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
fatality_by_gender = read_csv(
url(fatality_by_gender_url)
)
unique(fatality_by_gender$state)
fatality_by_gender[fatality_by_gender$state =="Wyoming", ]
runApp()
runApp()
runApp()
runApp()
runApp()
