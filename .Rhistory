fillOpacity = 1,
group = "Infected",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_cases$NAME,
"<br>",
"Number of cases: ",
prettyNum(map_cases$cases,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add deaths layer
addPolygons(
data = map_deaths,
fillColor = ~pal_deaths(deaths),
fillOpacity = 1,
group = "Fatality",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_deaths$NAME,
"<br>",
"Number of fatality: ",
prettyNum(map_deaths$deaths,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add legends
addLegend(
title = "Positive Cases",
pal = pal_cases,
values = map_cases$cases,
group = "Infected",
opacity = 1) %>%
addLegend(
title = "Fatality",
pal = pal_deaths,
values = map_deaths$deaths,
group = "Fatality",
opacity = 1) %>%
#add layer control
addLayersControl(
baseGroups = c ("Infected", "Fatality"),
options = layersControlOptions(collapsed=FALSE)
) %>%
setMaxBounds( lng1 = state_bounding$xmin,
lat1 = state_bounding$ymin,
lng2 = state_bounding$xmax,
lat2 = state_bounding$ymax)
return(temp_fig)
}
plot_case_map(covid19_county_data)
install.packages('htmlwidgets')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
plot_case_map <- function(x){
data = x
#get state name
state_name = unique(data$state)
#get state bounding box
state_bounding = state_bounding_box[state_bounding_box$NAME == state_name, ]
#get most recent data
data = data[data$date == Sys.Date() - 2, ]
temp_data_cases = subset(data,
select = c("cases", "fips")
)
temp_data_deaths = subset(data,
select = c("deaths", "fips")
)
colnames(temp_data_cases) <- c("cases", "GEOID")
colnames(temp_data_deaths) <- c("deaths", "GEOID")
fips = substring(data$fips[1], 1, 2) #get fips code of the state
#download map shape
map.shape = tigris::counties(state = fips,
cb = TRUE,
resolution='500k')
#convert tabular data into geo-spatial data
map_cases <- geo_join(map.shape,
temp_data_cases,
by = "GEOID")
map_deaths <- geo_join(map.shape,
temp_data_deaths,
by = "GEOID")
#color palette
roundUp <- function(x) 10^ceiling(log10(x))
risk_bins_cases <-c(
0,
ceiling(max(temp_data_cases$cases) * 0.01),
ceiling(max(temp_data_cases$cases) * 0.05),
ceiling(max(temp_data_cases$cases) * 0.1),
ceiling(max(temp_data_cases$cases) * 0.3),
ceiling(max(temp_data_cases$cases) * 0.5),
ceiling(max(temp_data_cases$cases))
)
risk_bins_deaths <-c(
0,
ceiling(max(temp_data_deaths$deaths) * 0.01),
ceiling(max(temp_data_deaths$deaths) * 0.05),
ceiling(max(temp_data_deaths$deaths) * 0.1),
ceiling(max(temp_data_deaths$deaths) * 0.3),
ceiling(max(temp_data_deaths$deaths) * 0.5),
ceiling(max(temp_data_deaths$deaths))
)
pal_cases <- colorBin("YlOrRd",
domain = temp_data_cases$cases,
bins = risk_bins_cases
)
pal_deaths <- colorBin("YlOrRd",
domain = temp_data_deaths$deaths,
bins = risk_bins_deaths
)
#make map
temp_fig = leaflet(options = leafletOptions(minZoom = 5)) %>%
addTiles() %>%
#add positive cases layer
addPolygons(
data = map_cases,
fillColor = ~pal_cases(cases),
fillOpacity = 1,
group = "Infected",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_cases$NAME,
"<br>",
"Number of cases: ",
prettyNum(map_cases$cases,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add deaths layer
addPolygons(
data = map_deaths,
fillColor = ~pal_deaths(deaths),
fillOpacity = 1,
group = "Fatality",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_deaths$NAME,
"<br>",
"Number of fatality: ",
prettyNum(map_deaths$deaths,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add legends
addLegend(
title = "Positive Cases",
pal = pal_cases,
values = map_cases$cases,
group = "Infected",
opacity = 1) %>%
addLegend(
title = "Fatality",
pal = pal_deaths,
values = map_deaths$deaths,
group = "Fatality",
opacity = 1) %>%
#add layer control
addLayersControl(
baseGroups = c ("Infected", "Fatality"),
options = layersControlOptions(collapsed = FALSE)
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
) %>%
setMaxBounds( lng1 = state_bounding$xmin,
lat1 = state_bounding$ymin,
lng2 = state_bounding$xmax,
lat2 = state_bounding$ymax)
return(temp_fig)
}
plot_case_map <- function(x){
data = x
#get state name
state_name = unique(data$state)
#get state bounding box
state_bounding = state_bounding_box[state_bounding_box$NAME == state_name, ]
#get most recent data
data = data[data$date == Sys.Date() - 2, ]
temp_data_cases = subset(data,
select = c("cases", "fips")
)
temp_data_deaths = subset(data,
select = c("deaths", "fips")
)
colnames(temp_data_cases) <- c("cases", "GEOID")
colnames(temp_data_deaths) <- c("deaths", "GEOID")
fips = substring(data$fips[1], 1, 2) #get fips code of the state
#download map shape
map.shape = tigris::counties(state = fips,
cb = TRUE,
resolution='500k')
#convert tabular data into geo-spatial data
map_cases <- geo_join(map.shape,
temp_data_cases,
by = "GEOID")
map_deaths <- geo_join(map.shape,
temp_data_deaths,
by = "GEOID")
#color palette
roundUp <- function(x) 10^ceiling(log10(x))
risk_bins_cases <-c(
0,
ceiling(max(temp_data_cases$cases) * 0.01),
ceiling(max(temp_data_cases$cases) * 0.05),
ceiling(max(temp_data_cases$cases) * 0.1),
ceiling(max(temp_data_cases$cases) * 0.3),
ceiling(max(temp_data_cases$cases) * 0.5),
ceiling(max(temp_data_cases$cases))
)
risk_bins_deaths <-c(
0,
ceiling(max(temp_data_deaths$deaths) * 0.01),
ceiling(max(temp_data_deaths$deaths) * 0.05),
ceiling(max(temp_data_deaths$deaths) * 0.1),
ceiling(max(temp_data_deaths$deaths) * 0.3),
ceiling(max(temp_data_deaths$deaths) * 0.5),
ceiling(max(temp_data_deaths$deaths))
)
pal_cases <- colorBin("YlOrRd",
domain = temp_data_cases$cases,
bins = risk_bins_cases
)
pal_deaths <- colorBin("YlOrRd",
domain = temp_data_deaths$deaths,
bins = risk_bins_deaths
)
#make map
temp_fig = leaflet(options = leafletOptions(minZoom = 5)) %>%
addTiles() %>%
#add positive cases layer
addPolygons(
data = map_cases,
fillColor = ~pal_cases(cases),
fillOpacity = 1,
group = "Infected",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_cases$NAME,
"<br>",
"Number of cases: ",
prettyNum(map_cases$cases,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add deaths layer
addPolygons(
data = map_deaths,
fillColor = ~pal_deaths(deaths),
fillOpacity = 1,
group = "Fatality",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_deaths$NAME,
"<br>",
"Number of fatality: ",
prettyNum(map_deaths$deaths,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add legends
addLegend(
title = "Positive Cases",
pal = pal_cases,
values = map_cases$cases,
group = "Infected",
opacity = 1) %>%
addLegend(
title = "Fatality",
pal = pal_deaths,
values = map_deaths$deaths,
group = "Fatality",
opacity = 1) %>%
#add layer control
addLayersControl(
baseGroups = c ("Infected", "Fatality"),
options = layersControlOptions(collapsed = FALSE) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
) %>%
setMaxBounds( lng1 = state_bounding$xmin,
lat1 = state_bounding$ymin,
lng2 = state_bounding$xmax,
lat2 = state_bounding$ymax)
return(temp_fig)
}
plot_case_map(covid19_county_data)
source("functions.R")
library('readr')
library('dplyr')
library('plotly')
library('zoo')
library('shinydashboard')
library('blscrapeR')
library('leaflet')
library('tigris')
plot_case_map(covid19_county_data)
plot_case_map <- function(x){
data = x
#get state name
state_name = unique(data$state)
#get state bounding box
state_bounding = state_bounding_box[state_bounding_box$NAME == state_name, ]
#get most recent data
data = data[data$date == Sys.Date() - 2, ]
temp_data_cases = subset(data,
select = c("cases", "fips")
)
temp_data_deaths = subset(data,
select = c("deaths", "fips")
)
colnames(temp_data_cases) <- c("cases", "GEOID")
colnames(temp_data_deaths) <- c("deaths", "GEOID")
fips = substring(data$fips[1], 1, 2) #get fips code of the state
#download map shape
map.shape = tigris::counties(state = fips,
cb = TRUE,
resolution='500k')
#convert tabular data into geo-spatial data
map_cases <- geo_join(map.shape,
temp_data_cases,
by = "GEOID")
map_deaths <- geo_join(map.shape,
temp_data_deaths,
by = "GEOID")
#color palette
roundUp <- function(x) 10^ceiling(log10(x))
risk_bins_cases <-c(
0,
ceiling(max(temp_data_cases$cases) * 0.01),
ceiling(max(temp_data_cases$cases) * 0.05),
ceiling(max(temp_data_cases$cases) * 0.1),
ceiling(max(temp_data_cases$cases) * 0.3),
ceiling(max(temp_data_cases$cases) * 0.5),
ceiling(max(temp_data_cases$cases))
)
risk_bins_deaths <-c(
0,
ceiling(max(temp_data_deaths$deaths) * 0.01),
ceiling(max(temp_data_deaths$deaths) * 0.05),
ceiling(max(temp_data_deaths$deaths) * 0.1),
ceiling(max(temp_data_deaths$deaths) * 0.3),
ceiling(max(temp_data_deaths$deaths) * 0.5),
ceiling(max(temp_data_deaths$deaths))
)
pal_cases <- colorBin("YlOrRd",
domain = temp_data_cases$cases,
bins = risk_bins_cases
)
pal_deaths <- colorBin("YlOrRd",
domain = temp_data_deaths$deaths,
bins = risk_bins_deaths
)
#make map
temp_fig = leaflet(options = leafletOptions(minZoom = 5)) %>%
addTiles() %>%
#add positive cases layer
addPolygons(
data = map_cases,
fillColor = ~pal_cases(cases),
fillOpacity = 1,
group = "Infected",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_cases$NAME,
"<br>",
"Number of cases: ",
prettyNum(map_cases$cases,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add deaths layer
addPolygons(
data = map_deaths,
fillColor = ~pal_deaths(deaths),
fillOpacity = 1,
group = "Fatality",
color = "#b2aeae",
weight = 1,
smoothFactor = 0.5,
popup = paste0("County: ",
map_deaths$NAME,
"<br>",
"Number of fatality: ",
prettyNum(map_deaths$deaths,
big.mark=",",
scientific = FALSE)
),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = TRUE)
) %>%
#add legends
addLegend(
title = "Positive Cases",
pal = pal_cases,
values = map_cases$cases,
group = "Infected",
opacity = 1) %>%
addLegend(
title = "Fatality",
pal = pal_deaths,
values = map_deaths$deaths,
group = "Fatality",
opacity = 1) %>%
#add layer control
addLayersControl(
baseGroups = c ("Infected", "Fatality"),
options = layersControlOptions(collapsed = FALSE) %>%
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
) %>%
setMaxBounds( lng1 = state_bounding$xmin,
lat1 = state_bounding$ymin,
lng2 = state_bounding$xmax,
lat2 = state_bounding$ymax)
return(temp_fig)
}
plot_case_map(covid19_county_data)
htmlwidgets::onRender("
function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
