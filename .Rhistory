lakecolor = toRGB('white')
)
fig = plot_ly()
fig = fig %>% add_trace(
type = "choropleth",
geojson = county,
locations = current_county_data$fips,
z = current_county_data$cases,
colorscale = "Reds",
zmin = 0,
zmax=  max(county_data$cases)*0.05,
marker = list(line=list(
width = 1)),
hoverinfo = 'text',
text = ~paste('Number of cases: ', current_county_data$cases)
)
fig = fig %>% colorbar(title = "COVID 19 cases in US")
fig = fig %>% layout(
title = "2019 Corona Cases"
)
fig = fig %>% layout(
geo = g
)
fig
library('readr')
library('dplyr')
library('plotly')
library('zoo')
library('shinydashboard')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
json_url = 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
county = rjson::fromJSON(file = json_url)
county_data = as.data.frame(read_csv(url(county_file_url)))
county_data$date = as.Date(county_data$date)
county_data$fips = as.character(county_data$fips)
current_county_data = county_data[county_data$date == Sys.Date()-2, ]
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig = plot_ly()
fig = fig %>% add_trace(
type = "choropleth",
geojson = county,
locations = current_county_data$fips,
z = current_county_data$cases,
colorscale = "Reds",
zmin = 0,
zmax=  max(county_data$cases)*0.05,
marker = list(line=list(
width = 0.5)),
hoverinfo = 'text',
text = ~paste('Number of cases: ', current_county_data$cases)
)
fig = fig %>% colorbar(title = "COVID 19 cases in US")
fig = fig %>% layout(
title = "2019 Corona Cases"
)
fig = fig %>% layout(
geo = g
)
fig
current_county_data
library('readr')
library('dplyr')
library('plotly')
library('zoo')
library('shinydashboard')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
json_url = 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
county = rjson::fromJSON(file = json_url)
county_data = as.data.frame(read_csv(url(county_file_url)))
county_data$date = as.Date(county_data$date)
county_data$fips = as.character(county_data$fips)
current_county_data = county_data[county_data$date == Sys.Date()-2, ]
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig = plot_ly()
fig = fig %>% add_trace(
type = "choropleth",
geojson = county,
locations = current_county_data$fips,
z = current_county_data$cases,
colorscale = "Reds",
zmin = 0,
zmax=  max(county_data$cases)*0.05,
marker = list(line=list(
width = 0.5)),
hoverinfo = 'text',
text = ~paste('</br> County: ', current_county_data$county,
'</br> State: ', current_county_data$state,
'</br> Number of cases: ', current_county_data$cases)
)
fig = fig %>% colorbar(title = "COVID 19 cases in US")
fig = fig %>% layout(
title = "2019 Corona Cases"
)
fig = fig %>% layout(
geo = g
)
fig
library('readr')
library('dplyr')
library('plotly')
library('zoo')
library('shinydashboard')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
json_url = 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
county = rjson::fromJSON(file = json_url)
county_data = as.data.frame(read_csv(url(county_file_url)))
county_data$date = as.Date(county_data$date)
county_data$fips = as.character(county_data$fips)
current_county_data = county_data[county_data$date == Sys.Date()-2, ]
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig = plot_ly()
fig = fig %>% add_trace(
type = "choropleth",
geojson = county,
locations = current_county_data$fips,
z = current_county_data$cases,
colorscale = "Reds",
zmin = 0,
zmax=  max(county_data$cases)*0.05,
marker = list(line=list(
width = 0.5)),
hoverinfo = 'text',
text = ~paste('</br> State: ', current_county_data$state,
'</br> County: ', current_county_data$county,
'</br> Number of cases: ', current_county_data$cases)
)
fig = fig %>% colorbar(title = "COVID 19 cases in US")
fig = fig %>% layout(
title = "2019 Corona Cases"
)
fig = fig %>% layout(
geo = g
)
fig
runApp('GitHub/covid_dashboard')
runApp('GitHub/covid_dashboard')
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
library('readr')
library('dplyr')
library('plotly')
library('zoo')
library('shinydashboard')
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
us_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
json_url = 'https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json'
server <- function(input, output) {
county = rjson::fromJSON(file = json_url)
county_data = read_csv(url(county_file_url))
county_data$fips = as.character(county_data$fips)
current_county_data = county_data[county_data$date == Sys.Date()-2, ]
us_data = read_csv(url(us_file_url))
#this variable contains time series of all states
us_cases_deaths = county_data %>%
group_by(state, date) %>%
summarise(cases = sum(cases),
deaths = sum(deaths))
#get state names and number of states
state_name = unique(county_data$state)
state_ID = seq(1:length(state_name))
state = data.frame(state_name, state_ID)
colnames(state) = c("Name", "ID")
state_count = length(state_name)
states_cases_deaths = list() #each sub-object of these objects contains time series of each states
for (i in 1:state_count){
states_cases_deaths[[i]] = us_cases_deaths[us_cases_deaths$state == state_name[i], ]
}
states_data = lapply(states_cases_deaths, diff) #calculate new cases and deaths
states_data = lapply(states_data, replace_) #replace NA with 0
us_data = diff(us_data)
us_data = replace_(us_data)
states_cases_perday = lapply(states_data, new_case)
states_deaths_perday = lapply(states_data, new_deaths)
states_deaths_perday = lapply(states_data, new_deaths)
us_cases_perday = new_case(us_data)
us_deaths_perday = new_deaths(us_data)
us_cases_perday_change = diff_percent(us_data)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
heatmap = plot_ly()
heatmap = heatmap %>% add_trace(
type = "choropleth",
geojson = county,
locations = current_county_data$fips,
z = current_county_data$cases,
colorscale = "Reds",
zmin = 0,
zmax=  max(county_data$cases)*0.05,
marker = list(line=list(
width = 0.5)),
hoverinfo = 'text',
text = ~paste('</br> State: ', current_county_data$state,
'</br> County: ', current_county_data$county,
'</br> Number of cases: ', current_county_data$cases)
)
heatmap = heatmap %>% colorbar(title = "COVID 19 cases in US")
heatmap = heatmap %>% layout(title = "2019 Corona Cases",
geo = g,
autosize = F,
width = 800,
height = 800,
margin = m)
output$nation_new_cases_timeseries = renderPlotly(us_cases_perday)
output$nation_new_death_timeseries = renderPlotly(us_deaths_perday)
output$heatmap = renderPlotly(heatmap)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('jsonlite')
install.packages("jsonlite")
url = "https://data.cdc.gov/resource/9bhg-hcku.json"
library('jsonlite')
data = fromJSON(url)
fix(data)
fix(data)
fix(data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('shinydashboard')
install.packages("shinydashboard")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
runApp()
runApp()
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Info boxes"),
dashboardSidebar(),
dashboardBody(
# infoBoxes with fill=FALSE
fluidRow(
# A static infoBox
infoBox("New Orders", 10 * 2, icon = icon("credit-card")),
# Dynamic infoBoxes
infoBoxOutput("progressBox"),
infoBoxOutput("approvalBox")
),
# infoBoxes with fill=TRUE
fluidRow(
infoBox("New Orders", 10 * 2, icon = icon("credit-card"), fill = TRUE),
infoBoxOutput("progressBox2"),
infoBoxOutput("approvalBox2")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
# Same as above, but with fill=TRUE
output$progressBox2 <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple", fill = TRUE
)
})
output$approvalBox2 <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow", fill = TRUE
)
})
}
shinyApp(ui, server)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
),
tabBox(
side = "right", height = "250px",
selected = "Tab3",
tabPanel("Tab1", "Tab content 1"),
tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
body <- dashboardBody(
fluidRow(
tabBox(
title = "First tabBox",
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1",
height = "300",
width = 10,
tabPanel("Tab1", "First tab content"),
tabPanel("Tab2", "Tab content 2")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
