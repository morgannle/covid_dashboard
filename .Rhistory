<<<<<<< HEAD
=======
covid19_county_data[ ,c("X", "deaths")] = NULL
covid19_county_data = covid19_county_data[complete.cases(covid19_county_data), ]
covid19_county_data = covid19_county_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(covid19_county_data)
temp_growth_percent = list()
for(i in (index - 7):index){
temp_growth_percent[[i]] = (covid19_county_data[,i] - covid19_county_data[,i-1])*100/covid19_county_data[,i-1]
}
growth_percent = data.frame(temp_growth_percent[[index-6]],
temp_growth_percent[[index-5]],
temp_growth_percent[[index-4]],
temp_growth_percent[[index-3]],
temp_growth_percent[[index-2]],
temp_growth_percent[[index-1]],
temp_growth_percent[[index]])
growth_percent_7days_average = rowMeans(growth_percent)
growth_percent_by_county = data.frame(covid19_county_data$state,
covid19_county_data$county,
covid19_county_data$fips,
growth_percent_7days_average,
row.names = NULL)
colnames(growth_percent_by_county) = c("State", "County", "fips", "7_day_average_case_growth")
x = plot_growth_percent(growth_percent_by_county)
x
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
#wd = "/srv/shiny-server/myapp/"
setwd(wd)
source("functions.R")
library(dplyr)
library(tidyr)
library(tidyverse)
current_date = Sys.Date() - 2
covid19_county_data = read.csv(county_file_url,
stringsAsFactors = FALSE,
header = TRUE)
covid19_county_data[ ,c("X", "deaths")] = NULL
covid19_county_data = covid19_county_data[complete.cases(covid19_county_data), ]
covid19_county_data = covid19_county_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(covid19_county_data)
temp_growth_percent = list()
for(i in (index - 7):index){
temp_growth_percent[[i]] = (covid19_county_data[,i] - covid19_county_data[,i-1])*100/covid19_county_data[,i-1]
}
growth_percent = data.frame(temp_growth_percent[[index-6]],
temp_growth_percent[[index-5]],
temp_growth_percent[[index-4]],
temp_growth_percent[[index-3]],
temp_growth_percent[[index-2]],
temp_growth_percent[[index-1]],
temp_growth_percent[[index]])
growth_percent_7days_average = rowMeans(growth_percent)
growth_percent_by_county = data.frame(covid19_county_data$state,
covid19_county_data$county,
covid19_county_data$fips,
growth_percent_7days_average,
row.names = NULL)
colnames(growth_percent_by_county) = c("State", "County", "fips", "7_day_average_case_growth")
x = plot_growth_percent(growth_percent_by_county)
x
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
#wd = "/srv/shiny-server/myapp/"
setwd(wd)
source("functions.R")
library(dplyr)
library(tidyr)
library(tidyverse)
current_date = Sys.Date() - 2
covid19_county_data = read.csv(county_file_url,
stringsAsFactors = FALSE,
header = TRUE)
covid19_county_data[ ,c("X", "deaths")] = NULL
covid19_county_data = covid19_county_data[complete.cases(covid19_county_data), ]
covid19_county_data = covid19_county_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(covid19_county_data)
temp_growth_percent = list()
for(i in (index - 7):index){
temp_growth_percent[[i]] = (covid19_county_data[,i] - covid19_county_data[,i-1])*100/covid19_county_data[,i-1]
}
growth_percent = data.frame(temp_growth_percent[[index-6]],
temp_growth_percent[[index-5]],
temp_growth_percent[[index-4]],
temp_growth_percent[[index-3]],
temp_growth_percent[[index-2]],
temp_growth_percent[[index-1]],
temp_growth_percent[[index]])
growth_percent_7days_average = rowMeans(growth_percent)
growth_percent_by_county = data.frame(covid19_county_data$state,
covid19_county_data$county,
covid19_county_data$fips,
growth_percent_7days_average,
row.names = NULL)
colnames(growth_percent_by_county) = c("State", "County", "fips", "7_day_average_case_growth")
x = plot_growth_percent(growth_percent_by_county)
x
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
#wd = "/srv/shiny-server/myapp/"
>>>>>>> parent of fec88ec... 8/11/2020
setwd(wd)
source("functions.R")
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
state_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us_file_url     = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
fatality_by_gender_url = "http://data.cdc.gov/resource/9bhg-hcku.csv?$limit=10000&$$app_token=Y21ef2T1w3Ub7VVJAF8l3sGGd"
population_by_county_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/63d02b9d1073eff62827daf155a4fe1ef4ab7188/pop_est_2019.csv"
covid19_county_data = read_csv(
url(county_file_url)
)
covid19_nation_data = read_csv(
url(us_file_url)
)
covid19_state_data = read_csv(
url(state_file_url)
)
fatality_by_gender = read_csv(
url(fatality_by_gender_url)
)
population_by_county = read_csv(
url(population_by_county_url)
)
covid19_county_data$date = as.Date(covid19_county_data$date)
covid19_nation_data$date = as.Date(covid19_nation_data$date)
covid19_county_data$fips = as.character(covid19_county_data$fips)
#Time series for national data
covid19_national_timeseries = diff(covid19_nation_data)
covid19_national_timeseries = replaceNA(covid19_national_timeseries)
#fatality by gender for national data
fatality_by_gender_data = fatality_by_gender[fatality_by_gender$state == "United States", ]
#national new cases
temp_data = covid19_county_data
temp_data[ ,c("X", "deaths")] = NULL
temp_data = temp_data[complete.cases(temp_data), ]
temp_data = temp_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(temp_data)
temp_new_cases = list()
for(i in (index - 7):index){
temp_new_cases[[i]] = temp_data[,i] - temp_data[,i-1]
}
new_cases = data.frame(temp_new_cases[[index-6]],
temp_new_cases[[index-5]],
temp_new_cases[[index-4]],
temp_new_cases[[index-3]],
temp_new_cases[[index-2]],
temp_new_cases[[index-1]],
temp_new_cases[[index]])
total_cases = temp_data[ ,ncol(temp_data)]
new_cases_7days_average = rowMeans(new_cases)
new_cases_by_county = data.frame(temp_data$state,
temp_data$county,
temp_data$fips,
new_cases_7days_average,
total_cases,
row.names = NULL)
colnames(new_cases_by_county) = c("State", "County", "fips", "new_cases_7day_average", "total_cases")
new_cases_per_100k = merge(new_cases_by_county, population_by_county, by = "fips")
new_cases_per_100k$new_cases_7day_average[new_cases_per_100k$new_cases_7day_average < 0] = 0
new_cases_per_100k = new_cases_per_100k %>% mutate(new_cases_per_100k = new_cases_7day_average*100000/population,
total_cases_per_100k = total_cases*100000/population)
#plotting
pie_chart_fatality_by_gender = by_gender(fatality_by_gender_data)
bar_plot_fatality_by_gender = by_age(fatality_by_gender_data)
new_cases_timeseries = plot_case(covid19_national_timeseries)
new_deaths_time_series = plot_death(covid19_national_timeseries)
heatmap_new_cases_by_county = plot_growth(growth_by_county)
library('tidyr')
library('tidyverse')
library('plotly')
library('readr')
library('dplyr')
library('zoo')
library('leaflet')
library('tigris')
library('blscrapeR')
#wd = "/srv/shiny-server/myapp/"
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
state_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us_file_url     = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
fatality_by_gender_url = "http://data.cdc.gov/resource/9bhg-hcku.csv?$limit=10000&$$app_token=Y21ef2T1w3Ub7VVJAF8l3sGGd"
population_by_county_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/63d02b9d1073eff62827daf155a4fe1ef4ab7188/pop_est_2019.csv"
covid19_county_data = read_csv(
url(county_file_url)
)
covid19_nation_data = read_csv(
url(us_file_url)
)
covid19_state_data = read_csv(
url(state_file_url)
)
fatality_by_gender = read_csv(
url(fatality_by_gender_url)
)
population_by_county = read_csv(
url(population_by_county_url)
)
covid19_county_data$date = as.Date(covid19_county_data$date)
covid19_nation_data$date = as.Date(covid19_nation_data$date)
covid19_county_data$fips = as.character(covid19_county_data$fips)
#Time series for national data
covid19_national_timeseries = diff(covid19_nation_data)
covid19_national_timeseries = replaceNA(covid19_national_timeseries)
#fatality by gender for national data
fatality_by_gender_data = fatality_by_gender[fatality_by_gender$state == "United States", ]
#national new cases
temp_data = covid19_county_data
temp_data[ ,c("X", "deaths")] = NULL
temp_data = temp_data[complete.cases(temp_data), ]
temp_data = temp_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(temp_data)
temp_new_cases = list()
for(i in (index - 7):index){
temp_new_cases[[i]] = temp_data[,i] - temp_data[,i-1]
}
new_cases = data.frame(temp_new_cases[[index-6]],
temp_new_cases[[index-5]],
temp_new_cases[[index-4]],
temp_new_cases[[index-3]],
temp_new_cases[[index-2]],
temp_new_cases[[index-1]],
temp_new_cases[[index]])
total_cases = temp_data[ ,ncol(temp_data)]
new_cases_7days_average = rowMeans(new_cases)
new_cases_by_county = data.frame(temp_data$state,
temp_data$county,
temp_data$fips,
new_cases_7days_average,
total_cases,
row.names = NULL)
colnames(new_cases_by_county) = c("State", "County", "fips", "new_cases_7day_average", "total_cases")
new_cases_per_100k = merge(new_cases_by_county, population_by_county, by = "fips")
new_cases_per_100k$new_cases_7day_average[new_cases_per_100k$new_cases_7day_average < 0] = 0
new_cases_per_100k = new_cases_per_100k %>% mutate(new_cases_per_100k = new_cases_7day_average*100000/population,
total_cases_per_100k = total_cases*100000/population)
#plotting
pie_chart_fatality_by_gender = by_gender(fatality_by_gender_data)
bar_plot_fatality_by_gender = by_age(fatality_by_gender_data)
new_cases_timeseries = plot_case(covid19_national_timeseries)
new_deaths_time_series = plot_death(covid19_national_timeseries)
heatmap_new_cases_by_county = plot_growth(new_cases_per_100k)
heatmap_new_cases_by_county
pie_chart_fatality_by_gender
bar_plot_fatality_by_gender
new_cases_timeseries
new_deaths_time_series
library('tidyr')
library('tidyverse')
library('plotly')
library('readr')
library('dplyr')
library('zoo')
library('leaflet')
library('tigris')
library('blscrapeR')
#wd = "/srv/shiny-server/myapp/"
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
state_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us_file_url     = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
fatality_by_gender_url = "http://data.cdc.gov/resource/9bhg-hcku.csv?$limit=10000&$$app_token=Y21ef2T1w3Ub7VVJAF8l3sGGd"
population_by_county_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/63d02b9d1073eff62827daf155a4fe1ef4ab7188/pop_est_2019.csv"
covid19_county_data = read_csv(
url(county_file_url)
)
covid19_nation_data = read_csv(
url(us_file_url)
)
covid19_state_data = read_csv(
url(state_file_url)
)
fatality_by_gender = read_csv(
url(fatality_by_gender_url)
)
population_by_county = read_csv(
url(population_by_county_url)
)
covid19_county_data$date = as.Date(covid19_county_data$date)
covid19_nation_data$date = as.Date(covid19_nation_data$date)
covid19_county_data$fips = as.character(covid19_county_data$fips)
#Time series for national data
covid19_national_timeseries = diff(covid19_nation_data)
covid19_national_timeseries = replaceNA(covid19_national_timeseries)
#fatality by gender for national data
fatality_by_gender_data = fatality_by_gender[fatality_by_gender$state == "United States", ]
#national new cases
temp_data = covid19_county_data
temp_data[ ,c("X", "deaths")] = NULL
temp_data = temp_data[complete.cases(temp_data), ]
temp_data = temp_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(temp_data)
temp_new_cases = list()
for(i in (index - 7):index){
temp_new_cases[[i]] = temp_data[,i] - temp_data[,i-1]
}
new_cases = data.frame(temp_new_cases[[index-6]],
temp_new_cases[[index-5]],
temp_new_cases[[index-4]],
temp_new_cases[[index-3]],
temp_new_cases[[index-2]],
temp_new_cases[[index-1]],
temp_new_cases[[index]])
total_cases = temp_data[ ,ncol(temp_data)]
new_cases_7days_average = rowMeans(new_cases)
new_cases_by_county = data.frame(temp_data$state,
temp_data$county,
temp_data$fips,
new_cases_7days_average,
total_cases,
row.names = NULL)
colnames(new_cases_by_county) = c("State", "County", "fips", "new_cases_7day_average", "total_cases")
new_cases_per_100k = merge(new_cases_by_county, population_by_county, by = "fips")
new_cases_per_100k$new_cases_7day_average[new_cases_per_100k$new_cases_7day_average < 0] = 0
new_cases_per_100k = new_cases_per_100k %>% mutate(new_cases_per_100k = new_cases_7day_average*100000/population,
total_cases_per_100k = total_cases*100000/population)
#plotting
pie_chart_fatality_by_gender = by_gender(fatality_by_gender_data)
bar_plot_fatality_by_gender = by_age(fatality_by_gender_data)
new_cases_timeseries = plot_case(covid19_national_timeseries)
new_deaths_time_series = plot_death(covid19_national_timeseries)
heatmap_new_cases_by_county = plot_growth(new_cases_per_100k)
save(pie_chart_fatality_by_gender, "C:/Users/nghia/OneDrive/Documents/RObject/pie_chart_fatality_by_gender")
save(pie_chart_fatality_by_gender, "C:/Users/nghia/OneDrive/Documents/RObject/pie_chart_fatality_by_gender.RData")
save(pie_chart_fatality_by_gender, file = "pie_chart_fatality_by_gender.RData")
library('tidyr')
library('tidyverse')
library('plotly')
library('readr')
library('dplyr')
library('zoo')
library('leaflet')
library('tigris')
library('blscrapeR')
#wd = "/srv/shiny-server/myapp/"
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
x = load("pie_chart_fatality_by_gender.RData")
x
library('tidyr')
library('tidyverse')
library('plotly')
library('readr')
library('dplyr')
library('zoo')
library('leaflet')
library('tigris')
library('blscrapeR')
#wd = "/srv/shiny-server/myapp/"
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
state_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us_file_url     = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
fatality_by_gender_url = "http://data.cdc.gov/resource/9bhg-hcku.csv?$limit=10000&$$app_token=Y21ef2T1w3Ub7VVJAF8l3sGGd"
population_by_county_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/63d02b9d1073eff62827daf155a4fe1ef4ab7188/pop_est_2019.csv"
covid19_county_data = read_csv(
url(county_file_url)
)
covid19_nation_data = read_csv(
url(us_file_url)
)
covid19_state_data = read_csv(
url(state_file_url)
)
fatality_by_gender = read_csv(
url(fatality_by_gender_url)
)
population_by_county = read_csv(
url(population_by_county_url)
)
covid19_county_data$date = as.Date(covid19_county_data$date)
covid19_nation_data$date = as.Date(covid19_nation_data$date)
covid19_county_data$fips = as.character(covid19_county_data$fips)
#Time series for national data
covid19_national_timeseries = diff(covid19_nation_data)
covid19_national_timeseries = replaceNA(covid19_national_timeseries)
#fatality by gender for national data
fatality_by_gender_data = fatality_by_gender[fatality_by_gender$state == "United States", ]
#national new cases
temp_data = covid19_county_data
temp_data[ ,c("X", "deaths")] = NULL
temp_data = temp_data[complete.cases(temp_data), ]
temp_data = temp_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(temp_data)
temp_new_cases = list()
for(i in (index - 7):index){
temp_new_cases[[i]] = temp_data[,i] - temp_data[,i-1]
}
new_cases = data.frame(temp_new_cases[[index-6]],
temp_new_cases[[index-5]],
temp_new_cases[[index-4]],
temp_new_cases[[index-3]],
temp_new_cases[[index-2]],
temp_new_cases[[index-1]],
temp_new_cases[[index]])
total_cases = temp_data[ ,ncol(temp_data)]
new_cases_7days_average = rowMeans(new_cases)
new_cases_by_county = data.frame(temp_data$state,
temp_data$county,
temp_data$fips,
new_cases_7days_average,
total_cases,
row.names = NULL)
colnames(new_cases_by_county) = c("State", "County", "fips", "new_cases_7day_average", "total_cases")
new_cases_per_100k = merge(new_cases_by_county, population_by_county, by = "fips")
new_cases_per_100k$new_cases_7day_average[new_cases_per_100k$new_cases_7day_average < 0] = 0
new_cases_per_100k = new_cases_per_100k %>% mutate(new_cases_per_100k = new_cases_7day_average*100000/population,
total_cases_per_100k = total_cases*100000/population)
#plotting
pie_chart_fatality_by_gender = by_gender(fatality_by_gender_data)
bar_plot_fatality_by_gender = by_age(fatality_by_gender_data)
new_cases_timeseries = plot_case(covid19_national_timeseries)
new_deaths_time_series = plot_death(covid19_national_timeseries)
heatmap_new_cases_by_county = plot_growth(new_cases_per_100k)
save(pie_chart_fatality_by_gender, file = "pie_chart_fatality_by_gender.RData")
recordPlot(load=heatmap_new_cases_by_county, attach=NULL)
temp = recordPlot(heatmap_new_cases_by_county)
heatmap_new_cases_by_county
x = recordPlot()
x = recordPlot()
library('tidyr')
library('tidyverse')
library('plotly')
library('readr')
library('dplyr')
library('zoo')
library('leaflet')
library('tigris')
library('blscrapeR')
#wd = "/srv/shiny-server/myapp/"
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
state_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us_file_url     = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
fatality_by_gender_url = "http://data.cdc.gov/resource/9bhg-hcku.csv?$limit=10000&$$app_token=Y21ef2T1w3Ub7VVJAF8l3sGGd"
population_by_county_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/63d02b9d1073eff62827daf155a4fe1ef4ab7188/pop_est_2019.csv"
covid19_county_data = read_csv(
url(county_file_url)
)
covid19_nation_data = read_csv(
url(us_file_url)
)
covid19_state_data = read_csv(
url(state_file_url)
)
fatality_by_gender = read_csv(
url(fatality_by_gender_url)
)
population_by_county = read_csv(
url(population_by_county_url)
)
covid19_county_data$date = as.Date(covid19_county_data$date)
covid19_nation_data$date = as.Date(covid19_nation_data$date)
covid19_county_data$fips = as.character(covid19_county_data$fips)
#Time series for national data
covid19_national_timeseries = diff(covid19_nation_data)
covid19_national_timeseries = replaceNA(covid19_national_timeseries)
#fatality by gender for national data
fatality_by_gender_data = fatality_by_gender[fatality_by_gender$state == "United States", ]
#national new cases
temp_data = covid19_county_data
temp_data[ ,c("X", "deaths")] = NULL
temp_data = temp_data[complete.cases(temp_data), ]
temp_data = temp_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(temp_data)
temp_new_cases = list()
for(i in (index - 7):index){
temp_new_cases[[i]] = temp_data[,i] - temp_data[,i-1]
}
new_cases = data.frame(temp_new_cases[[index-6]],
temp_new_cases[[index-5]],
temp_new_cases[[index-4]],
temp_new_cases[[index-3]],
temp_new_cases[[index-2]],
temp_new_cases[[index-1]],
temp_new_cases[[index]])
total_cases = temp_data[ ,ncol(temp_data)]
new_cases_7days_average = rowMeans(new_cases)
new_cases_by_county = data.frame(temp_data$state,
temp_data$county,
temp_data$fips,
new_cases_7days_average,
total_cases,
row.names = NULL)
<<<<<<< HEAD
colnames(new_cases_by_county) = c("State", "County", "fips", "new_cases_7day_average", "total_cases")
new_cases_per_100k = merge(new_cases_by_county, population_by_county, by = "fips")
new_cases_per_100k$new_cases_7day_average[new_cases_per_100k$new_cases_7day_average < 0] = 0
new_cases_per_100k = new_cases_per_100k %>% mutate(new_cases_per_100k = new_cases_7day_average*100000/population,
total_cases_per_100k = total_cases*100000/population)
#plotting
pie_chart_fatality_by_gender = by_gender(fatality_by_gender_data)
bar_plot_fatality_by_gender = by_age(fatality_by_gender_data)
new_cases_timeseries = plot_case(covid19_national_timeseries)
new_deaths_time_series = plot_death(covid19_national_timeseries)
heatmap_new_cases_by_county = plot_growth(new_cases_per_100k)
heatmap_new_cases_by_county
x = recordPlot()
plot(new_cases_per_100k$new_cases_7day_average, new_cases_per_100k$State)
plot(new_cases_per_100k$new_cases_7day_average)
x = recordPlot()
x
new_deaths_time_series
x = recordPlot()
install.packages('flexdashboard')
library('tidyr')
library('tidyverse')
library('plotly')
library('readr')
library('dplyr')
library('zoo')
library('leaflet')
library('tigris')
library('blscrapeR')
library('flexdashboard')
install.packages('flexdashboard')
install.packages("flexdashboard")
install.packages('flexdashboard')
install.packages("flexdashboard")
remove.packages('flexdashboard')
intall.packages('flexdashoard')
install.packages('flexdashoard')
install.packages('flexdashboard')
install.packages("flexdashboard")
remove.packages('flexdashboard')
install.packages('flexdashboard')
library(DT)
library('DT')
library('tidyr')
library('tidyverse')
library('plotly')
library('readr')
library('dplyr')
library('zoo')
library('leaflet')
library('tigris')
library('blscrapeR')
library('flexdashboard')
#wd = "/srv/shiny-server/myapp/"
wd = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard"
setwd(wd)
source("functions.R")
county_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
state_file_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us_file_url     = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
fatality_by_gender_url = "http://data.cdc.gov/resource/9bhg-hcku.csv?$limit=10000&$$app_token=Y21ef2T1w3Ub7VVJAF8l3sGGd"
population_by_county_url = "https://raw.githubusercontent.com/nytimes/covid-19-data/63d02b9d1073eff62827daf155a4fe1ef4ab7188/pop_est_2019.csv"
covid19_county_data = read_csv(
url(county_file_url)
)
covid19_nation_data = read_csv(
url(us_file_url)
)
covid19_state_data = read_csv(
url(state_file_url)
)
fatality_by_gender = read_csv(
url(fatality_by_gender_url)
)
population_by_county = read_csv(
url(population_by_county_url)
)
covid19_county_data$date = as.Date(covid19_county_data$date)
covid19_nation_data$date = as.Date(covid19_nation_data$date)
covid19_county_data$fips = as.character(covid19_county_data$fips)
#Time series for national data
covid19_national_timeseries = diff(covid19_nation_data)
covid19_national_timeseries = replaceNA(covid19_national_timeseries)
#fatality by gender for national data
fatality_by_gender_data = fatality_by_gender[fatality_by_gender$state == "United States", ]
#national new cases
temp_data = covid19_county_data
temp_data[ ,c("X", "deaths")] = NULL
temp_data = temp_data[complete.cases(temp_data), ]
temp_data = temp_data %>% pivot_wider(names_from = date, values_from = cases)
index = ncol(temp_data)
temp_new_cases = list()
for(i in (index - 7):index){
temp_new_cases[[i]] = temp_data[,i] - temp_data[,i-1]
}
new_cases = data.frame(temp_new_cases[[index-6]],
temp_new_cases[[index-5]],
temp_new_cases[[index-4]],
temp_new_cases[[index-3]],
temp_new_cases[[index-2]],
temp_new_cases[[index-1]],
temp_new_cases[[index]])
total_cases = temp_data[ ,ncol(temp_data)]
new_cases_7days_average = rowMeans(new_cases)
new_cases_by_county = data.frame(temp_data$state,
temp_data$county,
temp_data$fips,
new_cases_7days_average,
total_cases,
row.names = NULL)
colnames(new_cases_by_county) = c("State", "County",
"fips", "new_cases_7day_average", "total_cases")
new_cases_per_100k = merge(new_cases_by_county, population_by_county, by = "fips")
new_cases_per_100k$new_cases_7day_average[new_cases_per_100k$new_cases_7day_average < 0] = 0
new_cases_per_100k = new_cases_per_100k %>% mutate(new_cases_per_100k = new_cases_7day_average*100000/population,
total_cases_per_100k = total_cases*100000/population)
#datatable
table_cases  = new_cases_per_100k[, c("State", "County",
"total_cases", "total_cases_per_100k",
"new_cases_7day_average", "new_cases_per_100k")]
table_cases$total_cases = round(table$total_cases, 2)
=======
colnames(growth_percent_by_county) = c("State", "County", "fips", "7_day_average_case_growth")
write.csv(covid19_nation_data,
file = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard/covid19_nation_data.csv")
write.csv(covid19_state_data,
file = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard/covid19_state_data.csv")
write.csv(covid19_county_data,
file = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard/covid19_county_data.csv")
write.csv(fatality_by_gender,
file = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard/fatality_by_gender.csv")
write.csv(growth_percent_by_county,
file = "C:/Users/nghia/OneDrive/Documents/GitHub/covid_dashboard/growth_percent_by_county.csv")
runApp()
runApp()
growth_percent_by_county = read.csv(growth_percent_by_county_url,
stringsAsFactors = FALSE,
header = TRUE)
growth_percent_by_county
plot_growth_percent(growth_percent_by_county)
runApp()
growth_percent_by_county
plot_growth_percent(growth_percent_by_county)
x = growth_percent_by_county
fips = x$fips
fips = lapply(fips, function(x){
if(is.na(x) == TRUE)
return(0)
else
return(x)
})
fips = lapply(fips, function(x){
if (nchar(x) < 5)
return(paste0("0", x))
else return(x)
})
x$fips = fips
data = x
temp_data_cases = subset(data,
select = c("7_day_average_case_growth", "fips")
)
growth_percent_by_county = read.csv(growth_percent_by_county_url,
stringsAsFactors = FALSE,
header = TRUE)
growth_percent_by_county$X
growth_percent_by_county = read.csv(growth_percent_by_county_url,
stringsAsFactors = FALSE,
row.names = NULL,
header = TRUE)
head(growth_percent_by_county)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> parent of fec88ec... 8/11/2020
